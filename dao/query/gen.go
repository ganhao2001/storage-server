// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Dataset      *dataset
	Project      *project
	ProjectSpace *projectSpace
	Queue        *queue
	QueueDataset *queueDataset
	Space        *space
	User         *user
	UserDataset  *userDataset
	UserProject  *userProject
	UserQueue    *userQueue
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Dataset = &Q.Dataset
	Project = &Q.Project
	ProjectSpace = &Q.ProjectSpace
	Queue = &Q.Queue
	QueueDataset = &Q.QueueDataset
	Space = &Q.Space
	User = &Q.User
	UserDataset = &Q.UserDataset
	UserProject = &Q.UserProject
	UserQueue = &Q.UserQueue
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Dataset:      newDataset(db, opts...),
		Project:      newProject(db, opts...),
		ProjectSpace: newProjectSpace(db, opts...),
		Queue:        newQueue(db, opts...),
		QueueDataset: newQueueDataset(db, opts...),
		Space:        newSpace(db, opts...),
		User:         newUser(db, opts...),
		UserDataset:  newUserDataset(db, opts...),
		UserProject:  newUserProject(db, opts...),
		UserQueue:    newUserQueue(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Dataset      dataset
	Project      project
	ProjectSpace projectSpace
	Queue        queue
	QueueDataset queueDataset
	Space        space
	User         user
	UserDataset  userDataset
	UserProject  userProject
	UserQueue    userQueue
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Dataset:      q.Dataset.clone(db),
		Project:      q.Project.clone(db),
		ProjectSpace: q.ProjectSpace.clone(db),
		Queue:        q.Queue.clone(db),
		QueueDataset: q.QueueDataset.clone(db),
		Space:        q.Space.clone(db),
		User:         q.User.clone(db),
		UserDataset:  q.UserDataset.clone(db),
		UserProject:  q.UserProject.clone(db),
		UserQueue:    q.UserQueue.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Dataset:      q.Dataset.replaceDB(db),
		Project:      q.Project.replaceDB(db),
		ProjectSpace: q.ProjectSpace.replaceDB(db),
		Queue:        q.Queue.replaceDB(db),
		QueueDataset: q.QueueDataset.replaceDB(db),
		Space:        q.Space.replaceDB(db),
		User:         q.User.replaceDB(db),
		UserDataset:  q.UserDataset.replaceDB(db),
		UserProject:  q.UserProject.replaceDB(db),
		UserQueue:    q.UserQueue.replaceDB(db),
	}
}

type queryCtx struct {
	Dataset      IDatasetDo
	Project      IProjectDo
	ProjectSpace IProjectSpaceDo
	Queue        IQueueDo
	QueueDataset IQueueDatasetDo
	Space        ISpaceDo
	User         IUserDo
	UserDataset  IUserDatasetDo
	UserProject  IUserProjectDo
	UserQueue    IUserQueueDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Dataset:      q.Dataset.WithContext(ctx),
		Project:      q.Project.WithContext(ctx),
		ProjectSpace: q.ProjectSpace.WithContext(ctx),
		Queue:        q.Queue.WithContext(ctx),
		QueueDataset: q.QueueDataset.WithContext(ctx),
		Space:        q.Space.WithContext(ctx),
		User:         q.User.WithContext(ctx),
		UserDataset:  q.UserDataset.WithContext(ctx),
		UserProject:  q.UserProject.WithContext(ctx),
		UserQueue:    q.UserQueue.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
