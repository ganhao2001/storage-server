// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	Account        *account
	AccountDataset *accountDataset
	Dataset        *dataset
	User           *user
	UserAccount    *userAccount
	UserDataset    *userDataset
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Account = &Q.Account
	AccountDataset = &Q.AccountDataset
	Dataset = &Q.Dataset
	User = &Q.User
	UserAccount = &Q.UserAccount
	UserDataset = &Q.UserDataset
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Account:        newAccount(db, opts...),
		AccountDataset: newAccountDataset(db, opts...),
		Dataset:        newDataset(db, opts...),
		User:           newUser(db, opts...),
		UserAccount:    newUserAccount(db, opts...),
		UserDataset:    newUserDataset(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Account        account
	AccountDataset accountDataset
	Dataset        dataset
	User           user
	UserAccount    userAccount
	UserDataset    userDataset
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Account:        q.Account.clone(db),
		AccountDataset: q.AccountDataset.clone(db),
		Dataset:        q.Dataset.clone(db),
		User:           q.User.clone(db),
		UserAccount:    q.UserAccount.clone(db),
		UserDataset:    q.UserDataset.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Account:        q.Account.replaceDB(db),
		AccountDataset: q.AccountDataset.replaceDB(db),
		Dataset:        q.Dataset.replaceDB(db),
		User:           q.User.replaceDB(db),
		UserAccount:    q.UserAccount.replaceDB(db),
		UserDataset:    q.UserDataset.replaceDB(db),
	}
}

type queryCtx struct {
	Account        IAccountDo
	AccountDataset IAccountDatasetDo
	Dataset        IDatasetDo
	User           IUserDo
	UserAccount    IUserAccountDo
	UserDataset    IUserDatasetDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Account:        q.Account.WithContext(ctx),
		AccountDataset: q.AccountDataset.WithContext(ctx),
		Dataset:        q.Dataset.WithContext(ctx),
		User:           q.User.WithContext(ctx),
		UserAccount:    q.UserAccount.WithContext(ctx),
		UserDataset:    q.UserDataset.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
