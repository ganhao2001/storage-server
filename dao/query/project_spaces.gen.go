// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"webdav/dao/model"
)

func newProjectSpace(db *gorm.DB, opts ...gen.DOOption) projectSpace {
	_projectSpace := projectSpace{}

	_projectSpace.projectSpaceDo.UseDB(db, opts...)
	_projectSpace.projectSpaceDo.UseModel(&model.ProjectSpace{})

	tableName := _projectSpace.projectSpaceDo.TableName()
	_projectSpace.ALL = field.NewAsterisk(tableName)
	_projectSpace.ID = field.NewUint(tableName, "id")
	_projectSpace.CreatedAt = field.NewTime(tableName, "created_at")
	_projectSpace.UpdatedAt = field.NewTime(tableName, "updated_at")
	_projectSpace.DeletedAt = field.NewField(tableName, "deleted_at")
	_projectSpace.ProjectID = field.NewUint(tableName, "project_id")
	_projectSpace.SpaceID = field.NewUint(tableName, "space_id")

	_projectSpace.fillFieldMap()

	return _projectSpace
}

type projectSpace struct {
	projectSpaceDo projectSpaceDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	ProjectID field.Uint
	SpaceID   field.Uint

	fieldMap map[string]field.Expr
}

func (p projectSpace) Table(newTableName string) *projectSpace {
	p.projectSpaceDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectSpace) As(alias string) *projectSpace {
	p.projectSpaceDo.DO = *(p.projectSpaceDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectSpace) updateTableName(table string) *projectSpace {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.ProjectID = field.NewUint(table, "project_id")
	p.SpaceID = field.NewUint(table, "space_id")

	p.fillFieldMap()

	return p
}

func (p *projectSpace) WithContext(ctx context.Context) IProjectSpaceDo {
	return p.projectSpaceDo.WithContext(ctx)
}

func (p projectSpace) TableName() string { return p.projectSpaceDo.TableName() }

func (p projectSpace) Alias() string { return p.projectSpaceDo.Alias() }

func (p projectSpace) Columns(cols ...field.Expr) gen.Columns {
	return p.projectSpaceDo.Columns(cols...)
}

func (p *projectSpace) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectSpace) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["space_id"] = p.SpaceID
}

func (p projectSpace) clone(db *gorm.DB) projectSpace {
	p.projectSpaceDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectSpace) replaceDB(db *gorm.DB) projectSpace {
	p.projectSpaceDo.ReplaceDB(db)
	return p
}

type projectSpaceDo struct{ gen.DO }

type IProjectSpaceDo interface {
	gen.SubQuery
	Debug() IProjectSpaceDo
	WithContext(ctx context.Context) IProjectSpaceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectSpaceDo
	WriteDB() IProjectSpaceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectSpaceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectSpaceDo
	Not(conds ...gen.Condition) IProjectSpaceDo
	Or(conds ...gen.Condition) IProjectSpaceDo
	Select(conds ...field.Expr) IProjectSpaceDo
	Where(conds ...gen.Condition) IProjectSpaceDo
	Order(conds ...field.Expr) IProjectSpaceDo
	Distinct(cols ...field.Expr) IProjectSpaceDo
	Omit(cols ...field.Expr) IProjectSpaceDo
	Join(table schema.Tabler, on ...field.Expr) IProjectSpaceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectSpaceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectSpaceDo
	Group(cols ...field.Expr) IProjectSpaceDo
	Having(conds ...gen.Condition) IProjectSpaceDo
	Limit(limit int) IProjectSpaceDo
	Offset(offset int) IProjectSpaceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectSpaceDo
	Unscoped() IProjectSpaceDo
	Create(values ...*model.ProjectSpace) error
	CreateInBatches(values []*model.ProjectSpace, batchSize int) error
	Save(values ...*model.ProjectSpace) error
	First() (*model.ProjectSpace, error)
	Take() (*model.ProjectSpace, error)
	Last() (*model.ProjectSpace, error)
	Find() ([]*model.ProjectSpace, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectSpace, err error)
	FindInBatches(result *[]*model.ProjectSpace, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectSpace) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectSpaceDo
	Assign(attrs ...field.AssignExpr) IProjectSpaceDo
	Joins(fields ...field.RelationField) IProjectSpaceDo
	Preload(fields ...field.RelationField) IProjectSpaceDo
	FirstOrInit() (*model.ProjectSpace, error)
	FirstOrCreate() (*model.ProjectSpace, error)
	FindByPage(offset int, limit int) (result []*model.ProjectSpace, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectSpaceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectSpaceDo) Debug() IProjectSpaceDo {
	return p.withDO(p.DO.Debug())
}

func (p projectSpaceDo) WithContext(ctx context.Context) IProjectSpaceDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectSpaceDo) ReadDB() IProjectSpaceDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectSpaceDo) WriteDB() IProjectSpaceDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectSpaceDo) Session(config *gorm.Session) IProjectSpaceDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectSpaceDo) Clauses(conds ...clause.Expression) IProjectSpaceDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectSpaceDo) Returning(value interface{}, columns ...string) IProjectSpaceDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectSpaceDo) Not(conds ...gen.Condition) IProjectSpaceDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectSpaceDo) Or(conds ...gen.Condition) IProjectSpaceDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectSpaceDo) Select(conds ...field.Expr) IProjectSpaceDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectSpaceDo) Where(conds ...gen.Condition) IProjectSpaceDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectSpaceDo) Order(conds ...field.Expr) IProjectSpaceDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectSpaceDo) Distinct(cols ...field.Expr) IProjectSpaceDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectSpaceDo) Omit(cols ...field.Expr) IProjectSpaceDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectSpaceDo) Join(table schema.Tabler, on ...field.Expr) IProjectSpaceDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectSpaceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectSpaceDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectSpaceDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectSpaceDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectSpaceDo) Group(cols ...field.Expr) IProjectSpaceDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectSpaceDo) Having(conds ...gen.Condition) IProjectSpaceDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectSpaceDo) Limit(limit int) IProjectSpaceDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectSpaceDo) Offset(offset int) IProjectSpaceDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectSpaceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectSpaceDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectSpaceDo) Unscoped() IProjectSpaceDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectSpaceDo) Create(values ...*model.ProjectSpace) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectSpaceDo) CreateInBatches(values []*model.ProjectSpace, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectSpaceDo) Save(values ...*model.ProjectSpace) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectSpaceDo) First() (*model.ProjectSpace, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectSpace), nil
	}
}

func (p projectSpaceDo) Take() (*model.ProjectSpace, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectSpace), nil
	}
}

func (p projectSpaceDo) Last() (*model.ProjectSpace, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectSpace), nil
	}
}

func (p projectSpaceDo) Find() ([]*model.ProjectSpace, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectSpace), err
}

func (p projectSpaceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectSpace, err error) {
	buf := make([]*model.ProjectSpace, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectSpaceDo) FindInBatches(result *[]*model.ProjectSpace, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectSpaceDo) Attrs(attrs ...field.AssignExpr) IProjectSpaceDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectSpaceDo) Assign(attrs ...field.AssignExpr) IProjectSpaceDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectSpaceDo) Joins(fields ...field.RelationField) IProjectSpaceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectSpaceDo) Preload(fields ...field.RelationField) IProjectSpaceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectSpaceDo) FirstOrInit() (*model.ProjectSpace, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectSpace), nil
	}
}

func (p projectSpaceDo) FirstOrCreate() (*model.ProjectSpace, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectSpace), nil
	}
}

func (p projectSpaceDo) FindByPage(offset int, limit int) (result []*model.ProjectSpace, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectSpaceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectSpaceDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectSpaceDo) Delete(models ...*model.ProjectSpace) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectSpaceDo) withDO(do gen.Dao) *projectSpaceDo {
	p.DO = *do.(*gen.DO)
	return p
}
