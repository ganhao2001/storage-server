// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"webdav/dao/model"
)

func newQueue(db *gorm.DB, opts ...gen.DOOption) queue {
	_queue := queue{}

	_queue.queueDo.UseDB(db, opts...)
	_queue.queueDo.UseModel(&model.Queue{})

	tableName := _queue.queueDo.TableName()
	_queue.ALL = field.NewAsterisk(tableName)
	_queue.ID = field.NewUint(tableName, "id")
	_queue.CreatedAt = field.NewTime(tableName, "created_at")
	_queue.UpdatedAt = field.NewTime(tableName, "updated_at")
	_queue.DeletedAt = field.NewField(tableName, "deleted_at")
	_queue.Name = field.NewString(tableName, "name")
	_queue.Nickname = field.NewString(tableName, "nickname")
	_queue.Space = field.NewString(tableName, "space")
	_queue.UserQueues = queueHasManyUserQueues{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("UserQueues", "model.UserQueue"),
	}

	_queue.QueueDatasets = queueHasManyQueueDatasets{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("QueueDatasets", "model.QueueDataset"),
	}

	_queue.fillFieldMap()

	return _queue
}

type queue struct {
	queueDo queueDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	Name       field.String
	Nickname   field.String
	Space      field.String
	UserQueues queueHasManyUserQueues

	QueueDatasets queueHasManyQueueDatasets

	fieldMap map[string]field.Expr
}

func (q queue) Table(newTableName string) *queue {
	q.queueDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q queue) As(alias string) *queue {
	q.queueDo.DO = *(q.queueDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *queue) updateTableName(table string) *queue {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewUint(table, "id")
	q.CreatedAt = field.NewTime(table, "created_at")
	q.UpdatedAt = field.NewTime(table, "updated_at")
	q.DeletedAt = field.NewField(table, "deleted_at")
	q.Name = field.NewString(table, "name")
	q.Nickname = field.NewString(table, "nickname")
	q.Space = field.NewString(table, "space")

	q.fillFieldMap()

	return q
}

func (q *queue) WithContext(ctx context.Context) IQueueDo { return q.queueDo.WithContext(ctx) }

func (q queue) TableName() string { return q.queueDo.TableName() }

func (q queue) Alias() string { return q.queueDo.Alias() }

func (q queue) Columns(cols ...field.Expr) gen.Columns { return q.queueDo.Columns(cols...) }

func (q *queue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *queue) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 9)
	q.fieldMap["id"] = q.ID
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["updated_at"] = q.UpdatedAt
	q.fieldMap["deleted_at"] = q.DeletedAt
	q.fieldMap["name"] = q.Name
	q.fieldMap["nickname"] = q.Nickname
	q.fieldMap["space"] = q.Space

}

func (q queue) clone(db *gorm.DB) queue {
	q.queueDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q queue) replaceDB(db *gorm.DB) queue {
	q.queueDo.ReplaceDB(db)
	return q
}

type queueHasManyUserQueues struct {
	db *gorm.DB

	field.RelationField
}

func (a queueHasManyUserQueues) Where(conds ...field.Expr) *queueHasManyUserQueues {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a queueHasManyUserQueues) WithContext(ctx context.Context) *queueHasManyUserQueues {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a queueHasManyUserQueues) Session(session *gorm.Session) *queueHasManyUserQueues {
	a.db = a.db.Session(session)
	return &a
}

func (a queueHasManyUserQueues) Model(m *model.Queue) *queueHasManyUserQueuesTx {
	return &queueHasManyUserQueuesTx{a.db.Model(m).Association(a.Name())}
}

type queueHasManyUserQueuesTx struct{ tx *gorm.Association }

func (a queueHasManyUserQueuesTx) Find() (result []*model.UserQueue, err error) {
	return result, a.tx.Find(&result)
}

func (a queueHasManyUserQueuesTx) Append(values ...*model.UserQueue) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a queueHasManyUserQueuesTx) Replace(values ...*model.UserQueue) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a queueHasManyUserQueuesTx) Delete(values ...*model.UserQueue) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a queueHasManyUserQueuesTx) Clear() error {
	return a.tx.Clear()
}

func (a queueHasManyUserQueuesTx) Count() int64 {
	return a.tx.Count()
}

type queueHasManyQueueDatasets struct {
	db *gorm.DB

	field.RelationField
}

func (a queueHasManyQueueDatasets) Where(conds ...field.Expr) *queueHasManyQueueDatasets {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a queueHasManyQueueDatasets) WithContext(ctx context.Context) *queueHasManyQueueDatasets {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a queueHasManyQueueDatasets) Session(session *gorm.Session) *queueHasManyQueueDatasets {
	a.db = a.db.Session(session)
	return &a
}

func (a queueHasManyQueueDatasets) Model(m *model.Queue) *queueHasManyQueueDatasetsTx {
	return &queueHasManyQueueDatasetsTx{a.db.Model(m).Association(a.Name())}
}

type queueHasManyQueueDatasetsTx struct{ tx *gorm.Association }

func (a queueHasManyQueueDatasetsTx) Find() (result []*model.QueueDataset, err error) {
	return result, a.tx.Find(&result)
}

func (a queueHasManyQueueDatasetsTx) Append(values ...*model.QueueDataset) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a queueHasManyQueueDatasetsTx) Replace(values ...*model.QueueDataset) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a queueHasManyQueueDatasetsTx) Delete(values ...*model.QueueDataset) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a queueHasManyQueueDatasetsTx) Clear() error {
	return a.tx.Clear()
}

func (a queueHasManyQueueDatasetsTx) Count() int64 {
	return a.tx.Count()
}

type queueDo struct{ gen.DO }

type IQueueDo interface {
	gen.SubQuery
	Debug() IQueueDo
	WithContext(ctx context.Context) IQueueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQueueDo
	WriteDB() IQueueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQueueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQueueDo
	Not(conds ...gen.Condition) IQueueDo
	Or(conds ...gen.Condition) IQueueDo
	Select(conds ...field.Expr) IQueueDo
	Where(conds ...gen.Condition) IQueueDo
	Order(conds ...field.Expr) IQueueDo
	Distinct(cols ...field.Expr) IQueueDo
	Omit(cols ...field.Expr) IQueueDo
	Join(table schema.Tabler, on ...field.Expr) IQueueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQueueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQueueDo
	Group(cols ...field.Expr) IQueueDo
	Having(conds ...gen.Condition) IQueueDo
	Limit(limit int) IQueueDo
	Offset(offset int) IQueueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQueueDo
	Unscoped() IQueueDo
	Create(values ...*model.Queue) error
	CreateInBatches(values []*model.Queue, batchSize int) error
	Save(values ...*model.Queue) error
	First() (*model.Queue, error)
	Take() (*model.Queue, error)
	Last() (*model.Queue, error)
	Find() ([]*model.Queue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Queue, err error)
	FindInBatches(result *[]*model.Queue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Queue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQueueDo
	Assign(attrs ...field.AssignExpr) IQueueDo
	Joins(fields ...field.RelationField) IQueueDo
	Preload(fields ...field.RelationField) IQueueDo
	FirstOrInit() (*model.Queue, error)
	FirstOrCreate() (*model.Queue, error)
	FindByPage(offset int, limit int) (result []*model.Queue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQueueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q queueDo) Debug() IQueueDo {
	return q.withDO(q.DO.Debug())
}

func (q queueDo) WithContext(ctx context.Context) IQueueDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q queueDo) ReadDB() IQueueDo {
	return q.Clauses(dbresolver.Read)
}

func (q queueDo) WriteDB() IQueueDo {
	return q.Clauses(dbresolver.Write)
}

func (q queueDo) Session(config *gorm.Session) IQueueDo {
	return q.withDO(q.DO.Session(config))
}

func (q queueDo) Clauses(conds ...clause.Expression) IQueueDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q queueDo) Returning(value interface{}, columns ...string) IQueueDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q queueDo) Not(conds ...gen.Condition) IQueueDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q queueDo) Or(conds ...gen.Condition) IQueueDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q queueDo) Select(conds ...field.Expr) IQueueDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q queueDo) Where(conds ...gen.Condition) IQueueDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q queueDo) Order(conds ...field.Expr) IQueueDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q queueDo) Distinct(cols ...field.Expr) IQueueDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q queueDo) Omit(cols ...field.Expr) IQueueDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q queueDo) Join(table schema.Tabler, on ...field.Expr) IQueueDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q queueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQueueDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q queueDo) RightJoin(table schema.Tabler, on ...field.Expr) IQueueDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q queueDo) Group(cols ...field.Expr) IQueueDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q queueDo) Having(conds ...gen.Condition) IQueueDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q queueDo) Limit(limit int) IQueueDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q queueDo) Offset(offset int) IQueueDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q queueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQueueDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q queueDo) Unscoped() IQueueDo {
	return q.withDO(q.DO.Unscoped())
}

func (q queueDo) Create(values ...*model.Queue) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q queueDo) CreateInBatches(values []*model.Queue, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q queueDo) Save(values ...*model.Queue) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q queueDo) First() (*model.Queue, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Queue), nil
	}
}

func (q queueDo) Take() (*model.Queue, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Queue), nil
	}
}

func (q queueDo) Last() (*model.Queue, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Queue), nil
	}
}

func (q queueDo) Find() ([]*model.Queue, error) {
	result, err := q.DO.Find()
	return result.([]*model.Queue), err
}

func (q queueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Queue, err error) {
	buf := make([]*model.Queue, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q queueDo) FindInBatches(result *[]*model.Queue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q queueDo) Attrs(attrs ...field.AssignExpr) IQueueDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q queueDo) Assign(attrs ...field.AssignExpr) IQueueDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q queueDo) Joins(fields ...field.RelationField) IQueueDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q queueDo) Preload(fields ...field.RelationField) IQueueDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q queueDo) FirstOrInit() (*model.Queue, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Queue), nil
	}
}

func (q queueDo) FirstOrCreate() (*model.Queue, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Queue), nil
	}
}

func (q queueDo) FindByPage(offset int, limit int) (result []*model.Queue, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q queueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q queueDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q queueDo) Delete(models ...*model.Queue) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *queueDo) withDO(do gen.Dao) *queueDo {
	q.DO = *do.(*gen.DO)
	return q
}
