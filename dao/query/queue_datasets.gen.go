// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"webdav/dao/model"
)

func newQueueDataset(db *gorm.DB, opts ...gen.DOOption) queueDataset {
	_queueDataset := queueDataset{}

	_queueDataset.queueDatasetDo.UseDB(db, opts...)
	_queueDataset.queueDatasetDo.UseModel(&model.QueueDataset{})

	tableName := _queueDataset.queueDatasetDo.TableName()
	_queueDataset.ALL = field.NewAsterisk(tableName)
	_queueDataset.ID = field.NewUint(tableName, "id")
	_queueDataset.CreatedAt = field.NewTime(tableName, "created_at")
	_queueDataset.UpdatedAt = field.NewTime(tableName, "updated_at")
	_queueDataset.DeletedAt = field.NewField(tableName, "deleted_at")
	_queueDataset.QueueID = field.NewUint(tableName, "queue_id")
	_queueDataset.DatasetID = field.NewUint(tableName, "dataset_id")

	_queueDataset.fillFieldMap()

	return _queueDataset
}

type queueDataset struct {
	queueDatasetDo queueDatasetDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	QueueID   field.Uint
	DatasetID field.Uint

	fieldMap map[string]field.Expr
}

func (q queueDataset) Table(newTableName string) *queueDataset {
	q.queueDatasetDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q queueDataset) As(alias string) *queueDataset {
	q.queueDatasetDo.DO = *(q.queueDatasetDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *queueDataset) updateTableName(table string) *queueDataset {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewUint(table, "id")
	q.CreatedAt = field.NewTime(table, "created_at")
	q.UpdatedAt = field.NewTime(table, "updated_at")
	q.DeletedAt = field.NewField(table, "deleted_at")
	q.QueueID = field.NewUint(table, "queue_id")
	q.DatasetID = field.NewUint(table, "dataset_id")

	q.fillFieldMap()

	return q
}

func (q *queueDataset) WithContext(ctx context.Context) IQueueDatasetDo {
	return q.queueDatasetDo.WithContext(ctx)
}

func (q queueDataset) TableName() string { return q.queueDatasetDo.TableName() }

func (q queueDataset) Alias() string { return q.queueDatasetDo.Alias() }

func (q queueDataset) Columns(cols ...field.Expr) gen.Columns {
	return q.queueDatasetDo.Columns(cols...)
}

func (q *queueDataset) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *queueDataset) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 6)
	q.fieldMap["id"] = q.ID
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["updated_at"] = q.UpdatedAt
	q.fieldMap["deleted_at"] = q.DeletedAt
	q.fieldMap["queue_id"] = q.QueueID
	q.fieldMap["dataset_id"] = q.DatasetID
}

func (q queueDataset) clone(db *gorm.DB) queueDataset {
	q.queueDatasetDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q queueDataset) replaceDB(db *gorm.DB) queueDataset {
	q.queueDatasetDo.ReplaceDB(db)
	return q
}

type queueDatasetDo struct{ gen.DO }

type IQueueDatasetDo interface {
	gen.SubQuery
	Debug() IQueueDatasetDo
	WithContext(ctx context.Context) IQueueDatasetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQueueDatasetDo
	WriteDB() IQueueDatasetDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQueueDatasetDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQueueDatasetDo
	Not(conds ...gen.Condition) IQueueDatasetDo
	Or(conds ...gen.Condition) IQueueDatasetDo
	Select(conds ...field.Expr) IQueueDatasetDo
	Where(conds ...gen.Condition) IQueueDatasetDo
	Order(conds ...field.Expr) IQueueDatasetDo
	Distinct(cols ...field.Expr) IQueueDatasetDo
	Omit(cols ...field.Expr) IQueueDatasetDo
	Join(table schema.Tabler, on ...field.Expr) IQueueDatasetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQueueDatasetDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQueueDatasetDo
	Group(cols ...field.Expr) IQueueDatasetDo
	Having(conds ...gen.Condition) IQueueDatasetDo
	Limit(limit int) IQueueDatasetDo
	Offset(offset int) IQueueDatasetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQueueDatasetDo
	Unscoped() IQueueDatasetDo
	Create(values ...*model.QueueDataset) error
	CreateInBatches(values []*model.QueueDataset, batchSize int) error
	Save(values ...*model.QueueDataset) error
	First() (*model.QueueDataset, error)
	Take() (*model.QueueDataset, error)
	Last() (*model.QueueDataset, error)
	Find() ([]*model.QueueDataset, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QueueDataset, err error)
	FindInBatches(result *[]*model.QueueDataset, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QueueDataset) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQueueDatasetDo
	Assign(attrs ...field.AssignExpr) IQueueDatasetDo
	Joins(fields ...field.RelationField) IQueueDatasetDo
	Preload(fields ...field.RelationField) IQueueDatasetDo
	FirstOrInit() (*model.QueueDataset, error)
	FirstOrCreate() (*model.QueueDataset, error)
	FindByPage(offset int, limit int) (result []*model.QueueDataset, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQueueDatasetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q queueDatasetDo) Debug() IQueueDatasetDo {
	return q.withDO(q.DO.Debug())
}

func (q queueDatasetDo) WithContext(ctx context.Context) IQueueDatasetDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q queueDatasetDo) ReadDB() IQueueDatasetDo {
	return q.Clauses(dbresolver.Read)
}

func (q queueDatasetDo) WriteDB() IQueueDatasetDo {
	return q.Clauses(dbresolver.Write)
}

func (q queueDatasetDo) Session(config *gorm.Session) IQueueDatasetDo {
	return q.withDO(q.DO.Session(config))
}

func (q queueDatasetDo) Clauses(conds ...clause.Expression) IQueueDatasetDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q queueDatasetDo) Returning(value interface{}, columns ...string) IQueueDatasetDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q queueDatasetDo) Not(conds ...gen.Condition) IQueueDatasetDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q queueDatasetDo) Or(conds ...gen.Condition) IQueueDatasetDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q queueDatasetDo) Select(conds ...field.Expr) IQueueDatasetDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q queueDatasetDo) Where(conds ...gen.Condition) IQueueDatasetDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q queueDatasetDo) Order(conds ...field.Expr) IQueueDatasetDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q queueDatasetDo) Distinct(cols ...field.Expr) IQueueDatasetDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q queueDatasetDo) Omit(cols ...field.Expr) IQueueDatasetDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q queueDatasetDo) Join(table schema.Tabler, on ...field.Expr) IQueueDatasetDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q queueDatasetDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQueueDatasetDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q queueDatasetDo) RightJoin(table schema.Tabler, on ...field.Expr) IQueueDatasetDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q queueDatasetDo) Group(cols ...field.Expr) IQueueDatasetDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q queueDatasetDo) Having(conds ...gen.Condition) IQueueDatasetDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q queueDatasetDo) Limit(limit int) IQueueDatasetDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q queueDatasetDo) Offset(offset int) IQueueDatasetDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q queueDatasetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQueueDatasetDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q queueDatasetDo) Unscoped() IQueueDatasetDo {
	return q.withDO(q.DO.Unscoped())
}

func (q queueDatasetDo) Create(values ...*model.QueueDataset) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q queueDatasetDo) CreateInBatches(values []*model.QueueDataset, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q queueDatasetDo) Save(values ...*model.QueueDataset) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q queueDatasetDo) First() (*model.QueueDataset, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueDataset), nil
	}
}

func (q queueDatasetDo) Take() (*model.QueueDataset, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueDataset), nil
	}
}

func (q queueDatasetDo) Last() (*model.QueueDataset, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueDataset), nil
	}
}

func (q queueDatasetDo) Find() ([]*model.QueueDataset, error) {
	result, err := q.DO.Find()
	return result.([]*model.QueueDataset), err
}

func (q queueDatasetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QueueDataset, err error) {
	buf := make([]*model.QueueDataset, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q queueDatasetDo) FindInBatches(result *[]*model.QueueDataset, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q queueDatasetDo) Attrs(attrs ...field.AssignExpr) IQueueDatasetDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q queueDatasetDo) Assign(attrs ...field.AssignExpr) IQueueDatasetDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q queueDatasetDo) Joins(fields ...field.RelationField) IQueueDatasetDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q queueDatasetDo) Preload(fields ...field.RelationField) IQueueDatasetDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q queueDatasetDo) FirstOrInit() (*model.QueueDataset, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueDataset), nil
	}
}

func (q queueDatasetDo) FirstOrCreate() (*model.QueueDataset, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QueueDataset), nil
	}
}

func (q queueDatasetDo) FindByPage(offset int, limit int) (result []*model.QueueDataset, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q queueDatasetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q queueDatasetDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q queueDatasetDo) Delete(models ...*model.QueueDataset) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *queueDatasetDo) withDO(do gen.Dao) *queueDatasetDo {
	q.DO = *do.(*gen.DO)
	return q
}
