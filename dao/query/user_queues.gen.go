// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"webdav/dao/model"
)

func newUserQueue(db *gorm.DB, opts ...gen.DOOption) userQueue {
	_userQueue := userQueue{}

	_userQueue.userQueueDo.UseDB(db, opts...)
	_userQueue.userQueueDo.UseModel(&model.UserQueue{})

	tableName := _userQueue.userQueueDo.TableName()
	_userQueue.ALL = field.NewAsterisk(tableName)
	_userQueue.ID = field.NewUint(tableName, "id")
	_userQueue.CreatedAt = field.NewTime(tableName, "created_at")
	_userQueue.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userQueue.DeletedAt = field.NewField(tableName, "deleted_at")
	_userQueue.UserID = field.NewUint(tableName, "user_id")
	_userQueue.QueueID = field.NewUint(tableName, "queue_id")
	_userQueue.Role = field.NewUint8(tableName, "role")
	_userQueue.AccessMode = field.NewUint8(tableName, "access_mode")

	_userQueue.fillFieldMap()

	return _userQueue
}

type userQueue struct {
	userQueueDo userQueueDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	UserID     field.Uint
	QueueID    field.Uint
	Role       field.Uint8
	AccessMode field.Uint8

	fieldMap map[string]field.Expr
}

func (u userQueue) Table(newTableName string) *userQueue {
	u.userQueueDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userQueue) As(alias string) *userQueue {
	u.userQueueDo.DO = *(u.userQueueDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userQueue) updateTableName(table string) *userQueue {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UserID = field.NewUint(table, "user_id")
	u.QueueID = field.NewUint(table, "queue_id")
	u.Role = field.NewUint8(table, "role")
	u.AccessMode = field.NewUint8(table, "access_mode")

	u.fillFieldMap()

	return u
}

func (u *userQueue) WithContext(ctx context.Context) IUserQueueDo {
	return u.userQueueDo.WithContext(ctx)
}

func (u userQueue) TableName() string { return u.userQueueDo.TableName() }

func (u userQueue) Alias() string { return u.userQueueDo.Alias() }

func (u userQueue) Columns(cols ...field.Expr) gen.Columns { return u.userQueueDo.Columns(cols...) }

func (u *userQueue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userQueue) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["queue_id"] = u.QueueID
	u.fieldMap["role"] = u.Role
	u.fieldMap["access_mode"] = u.AccessMode
}

func (u userQueue) clone(db *gorm.DB) userQueue {
	u.userQueueDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userQueue) replaceDB(db *gorm.DB) userQueue {
	u.userQueueDo.ReplaceDB(db)
	return u
}

type userQueueDo struct{ gen.DO }

type IUserQueueDo interface {
	gen.SubQuery
	Debug() IUserQueueDo
	WithContext(ctx context.Context) IUserQueueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserQueueDo
	WriteDB() IUserQueueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserQueueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserQueueDo
	Not(conds ...gen.Condition) IUserQueueDo
	Or(conds ...gen.Condition) IUserQueueDo
	Select(conds ...field.Expr) IUserQueueDo
	Where(conds ...gen.Condition) IUserQueueDo
	Order(conds ...field.Expr) IUserQueueDo
	Distinct(cols ...field.Expr) IUserQueueDo
	Omit(cols ...field.Expr) IUserQueueDo
	Join(table schema.Tabler, on ...field.Expr) IUserQueueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserQueueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserQueueDo
	Group(cols ...field.Expr) IUserQueueDo
	Having(conds ...gen.Condition) IUserQueueDo
	Limit(limit int) IUserQueueDo
	Offset(offset int) IUserQueueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserQueueDo
	Unscoped() IUserQueueDo
	Create(values ...*model.UserQueue) error
	CreateInBatches(values []*model.UserQueue, batchSize int) error
	Save(values ...*model.UserQueue) error
	First() (*model.UserQueue, error)
	Take() (*model.UserQueue, error)
	Last() (*model.UserQueue, error)
	Find() ([]*model.UserQueue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserQueue, err error)
	FindInBatches(result *[]*model.UserQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserQueue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserQueueDo
	Assign(attrs ...field.AssignExpr) IUserQueueDo
	Joins(fields ...field.RelationField) IUserQueueDo
	Preload(fields ...field.RelationField) IUserQueueDo
	FirstOrInit() (*model.UserQueue, error)
	FirstOrCreate() (*model.UserQueue, error)
	FindByPage(offset int, limit int) (result []*model.UserQueue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserQueueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userQueueDo) Debug() IUserQueueDo {
	return u.withDO(u.DO.Debug())
}

func (u userQueueDo) WithContext(ctx context.Context) IUserQueueDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userQueueDo) ReadDB() IUserQueueDo {
	return u.Clauses(dbresolver.Read)
}

func (u userQueueDo) WriteDB() IUserQueueDo {
	return u.Clauses(dbresolver.Write)
}

func (u userQueueDo) Session(config *gorm.Session) IUserQueueDo {
	return u.withDO(u.DO.Session(config))
}

func (u userQueueDo) Clauses(conds ...clause.Expression) IUserQueueDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userQueueDo) Returning(value interface{}, columns ...string) IUserQueueDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userQueueDo) Not(conds ...gen.Condition) IUserQueueDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userQueueDo) Or(conds ...gen.Condition) IUserQueueDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userQueueDo) Select(conds ...field.Expr) IUserQueueDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userQueueDo) Where(conds ...gen.Condition) IUserQueueDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userQueueDo) Order(conds ...field.Expr) IUserQueueDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userQueueDo) Distinct(cols ...field.Expr) IUserQueueDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userQueueDo) Omit(cols ...field.Expr) IUserQueueDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userQueueDo) Join(table schema.Tabler, on ...field.Expr) IUserQueueDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userQueueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserQueueDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userQueueDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserQueueDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userQueueDo) Group(cols ...field.Expr) IUserQueueDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userQueueDo) Having(conds ...gen.Condition) IUserQueueDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userQueueDo) Limit(limit int) IUserQueueDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userQueueDo) Offset(offset int) IUserQueueDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userQueueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserQueueDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userQueueDo) Unscoped() IUserQueueDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userQueueDo) Create(values ...*model.UserQueue) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userQueueDo) CreateInBatches(values []*model.UserQueue, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userQueueDo) Save(values ...*model.UserQueue) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userQueueDo) First() (*model.UserQueue, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQueue), nil
	}
}

func (u userQueueDo) Take() (*model.UserQueue, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQueue), nil
	}
}

func (u userQueueDo) Last() (*model.UserQueue, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQueue), nil
	}
}

func (u userQueueDo) Find() ([]*model.UserQueue, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserQueue), err
}

func (u userQueueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserQueue, err error) {
	buf := make([]*model.UserQueue, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userQueueDo) FindInBatches(result *[]*model.UserQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userQueueDo) Attrs(attrs ...field.AssignExpr) IUserQueueDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userQueueDo) Assign(attrs ...field.AssignExpr) IUserQueueDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userQueueDo) Joins(fields ...field.RelationField) IUserQueueDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userQueueDo) Preload(fields ...field.RelationField) IUserQueueDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userQueueDo) FirstOrInit() (*model.UserQueue, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQueue), nil
	}
}

func (u userQueueDo) FirstOrCreate() (*model.UserQueue, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQueue), nil
	}
}

func (u userQueueDo) FindByPage(offset int, limit int) (result []*model.UserQueue, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userQueueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userQueueDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userQueueDo) Delete(models ...*model.UserQueue) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userQueueDo) withDO(do gen.Dao) *userQueueDo {
	u.DO = *do.(*gen.DO)
	return u
}
