// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"webdav/dao/model"
)

func newUserDataset(db *gorm.DB, opts ...gen.DOOption) userDataset {
	_userDataset := userDataset{}

	_userDataset.userDatasetDo.UseDB(db, opts...)
	_userDataset.userDatasetDo.UseModel(&model.UserDataset{})

	tableName := _userDataset.userDatasetDo.TableName()
	_userDataset.ALL = field.NewAsterisk(tableName)
	_userDataset.ID = field.NewUint(tableName, "id")
	_userDataset.CreatedAt = field.NewTime(tableName, "created_at")
	_userDataset.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userDataset.DeletedAt = field.NewField(tableName, "deleted_at")
	_userDataset.UserID = field.NewUint(tableName, "user_id")
	_userDataset.DatasetID = field.NewUint(tableName, "dataset_id")

	_userDataset.fillFieldMap()

	return _userDataset
}

type userDataset struct {
	userDatasetDo userDatasetDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UserID    field.Uint
	DatasetID field.Uint

	fieldMap map[string]field.Expr
}

func (u userDataset) Table(newTableName string) *userDataset {
	u.userDatasetDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userDataset) As(alias string) *userDataset {
	u.userDatasetDo.DO = *(u.userDatasetDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userDataset) updateTableName(table string) *userDataset {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UserID = field.NewUint(table, "user_id")
	u.DatasetID = field.NewUint(table, "dataset_id")

	u.fillFieldMap()

	return u
}

func (u *userDataset) WithContext(ctx context.Context) IUserDatasetDo {
	return u.userDatasetDo.WithContext(ctx)
}

func (u userDataset) TableName() string { return u.userDatasetDo.TableName() }

func (u userDataset) Alias() string { return u.userDatasetDo.Alias() }

func (u userDataset) Columns(cols ...field.Expr) gen.Columns { return u.userDatasetDo.Columns(cols...) }

func (u *userDataset) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userDataset) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["dataset_id"] = u.DatasetID
}

func (u userDataset) clone(db *gorm.DB) userDataset {
	u.userDatasetDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userDataset) replaceDB(db *gorm.DB) userDataset {
	u.userDatasetDo.ReplaceDB(db)
	return u
}

type userDatasetDo struct{ gen.DO }

type IUserDatasetDo interface {
	gen.SubQuery
	Debug() IUserDatasetDo
	WithContext(ctx context.Context) IUserDatasetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDatasetDo
	WriteDB() IUserDatasetDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDatasetDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDatasetDo
	Not(conds ...gen.Condition) IUserDatasetDo
	Or(conds ...gen.Condition) IUserDatasetDo
	Select(conds ...field.Expr) IUserDatasetDo
	Where(conds ...gen.Condition) IUserDatasetDo
	Order(conds ...field.Expr) IUserDatasetDo
	Distinct(cols ...field.Expr) IUserDatasetDo
	Omit(cols ...field.Expr) IUserDatasetDo
	Join(table schema.Tabler, on ...field.Expr) IUserDatasetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDatasetDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDatasetDo
	Group(cols ...field.Expr) IUserDatasetDo
	Having(conds ...gen.Condition) IUserDatasetDo
	Limit(limit int) IUserDatasetDo
	Offset(offset int) IUserDatasetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDatasetDo
	Unscoped() IUserDatasetDo
	Create(values ...*model.UserDataset) error
	CreateInBatches(values []*model.UserDataset, batchSize int) error
	Save(values ...*model.UserDataset) error
	First() (*model.UserDataset, error)
	Take() (*model.UserDataset, error)
	Last() (*model.UserDataset, error)
	Find() ([]*model.UserDataset, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserDataset, err error)
	FindInBatches(result *[]*model.UserDataset, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserDataset) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDatasetDo
	Assign(attrs ...field.AssignExpr) IUserDatasetDo
	Joins(fields ...field.RelationField) IUserDatasetDo
	Preload(fields ...field.RelationField) IUserDatasetDo
	FirstOrInit() (*model.UserDataset, error)
	FirstOrCreate() (*model.UserDataset, error)
	FindByPage(offset int, limit int) (result []*model.UserDataset, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDatasetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userDatasetDo) Debug() IUserDatasetDo {
	return u.withDO(u.DO.Debug())
}

func (u userDatasetDo) WithContext(ctx context.Context) IUserDatasetDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDatasetDo) ReadDB() IUserDatasetDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDatasetDo) WriteDB() IUserDatasetDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDatasetDo) Session(config *gorm.Session) IUserDatasetDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDatasetDo) Clauses(conds ...clause.Expression) IUserDatasetDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDatasetDo) Returning(value interface{}, columns ...string) IUserDatasetDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDatasetDo) Not(conds ...gen.Condition) IUserDatasetDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDatasetDo) Or(conds ...gen.Condition) IUserDatasetDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDatasetDo) Select(conds ...field.Expr) IUserDatasetDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDatasetDo) Where(conds ...gen.Condition) IUserDatasetDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDatasetDo) Order(conds ...field.Expr) IUserDatasetDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDatasetDo) Distinct(cols ...field.Expr) IUserDatasetDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDatasetDo) Omit(cols ...field.Expr) IUserDatasetDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDatasetDo) Join(table schema.Tabler, on ...field.Expr) IUserDatasetDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDatasetDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDatasetDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDatasetDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDatasetDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDatasetDo) Group(cols ...field.Expr) IUserDatasetDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDatasetDo) Having(conds ...gen.Condition) IUserDatasetDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDatasetDo) Limit(limit int) IUserDatasetDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDatasetDo) Offset(offset int) IUserDatasetDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDatasetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDatasetDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDatasetDo) Unscoped() IUserDatasetDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDatasetDo) Create(values ...*model.UserDataset) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDatasetDo) CreateInBatches(values []*model.UserDataset, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDatasetDo) Save(values ...*model.UserDataset) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDatasetDo) First() (*model.UserDataset, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDataset), nil
	}
}

func (u userDatasetDo) Take() (*model.UserDataset, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDataset), nil
	}
}

func (u userDatasetDo) Last() (*model.UserDataset, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDataset), nil
	}
}

func (u userDatasetDo) Find() ([]*model.UserDataset, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserDataset), err
}

func (u userDatasetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserDataset, err error) {
	buf := make([]*model.UserDataset, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDatasetDo) FindInBatches(result *[]*model.UserDataset, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDatasetDo) Attrs(attrs ...field.AssignExpr) IUserDatasetDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDatasetDo) Assign(attrs ...field.AssignExpr) IUserDatasetDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDatasetDo) Joins(fields ...field.RelationField) IUserDatasetDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDatasetDo) Preload(fields ...field.RelationField) IUserDatasetDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDatasetDo) FirstOrInit() (*model.UserDataset, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDataset), nil
	}
}

func (u userDatasetDo) FirstOrCreate() (*model.UserDataset, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDataset), nil
	}
}

func (u userDatasetDo) FindByPage(offset int, limit int) (result []*model.UserDataset, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDatasetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDatasetDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDatasetDo) Delete(models ...*model.UserDataset) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDatasetDo) withDO(do gen.Dao) *userDatasetDo {
	u.DO = *do.(*gen.DO)
	return u
}
