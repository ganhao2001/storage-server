// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"webdav/dao/model"
)

func newUserProject(db *gorm.DB, opts ...gen.DOOption) userProject {
	_userProject := userProject{}

	_userProject.userProjectDo.UseDB(db, opts...)
	_userProject.userProjectDo.UseModel(&model.UserProject{})

	tableName := _userProject.userProjectDo.TableName()
	_userProject.ALL = field.NewAsterisk(tableName)
	_userProject.ID = field.NewUint(tableName, "id")
	_userProject.CreatedAt = field.NewTime(tableName, "created_at")
	_userProject.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userProject.DeletedAt = field.NewField(tableName, "deleted_at")
	_userProject.UserID = field.NewUint(tableName, "user_id")
	_userProject.ProjectID = field.NewUint(tableName, "project_id")
	_userProject.Role = field.NewUint8(tableName, "role")
	_userProject.AccessMode = field.NewUint8(tableName, "access_mode")
	_userProject.JobReq = field.NewInt(tableName, "job_req")
	_userProject.Job = field.NewInt(tableName, "job")
	_userProject.NodeReq = field.NewInt(tableName, "node_req")
	_userProject.Node = field.NewInt(tableName, "node")
	_userProject.CPUReq = field.NewInt(tableName, "cpu_req")
	_userProject.CPU = field.NewInt(tableName, "cpu")
	_userProject.GPUReq = field.NewInt(tableName, "gpu_req")
	_userProject.GPU = field.NewInt(tableName, "gpu")
	_userProject.MemReq = field.NewInt(tableName, "mem_req")
	_userProject.Mem = field.NewInt(tableName, "mem")
	_userProject.GPUMemReq = field.NewInt(tableName, "gpu_mem_req")
	_userProject.GPUMem = field.NewInt(tableName, "gpu_mem")
	_userProject.Storage = field.NewInt(tableName, "storage")
	_userProject.Extra = field.NewString(tableName, "extra")

	_userProject.fillFieldMap()

	return _userProject
}

type userProject struct {
	userProjectDo userProjectDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	UserID     field.Uint
	ProjectID  field.Uint
	Role       field.Uint8
	AccessMode field.Uint8
	JobReq     field.Int
	Job        field.Int
	NodeReq    field.Int
	Node       field.Int
	CPUReq     field.Int
	CPU        field.Int
	GPUReq     field.Int
	GPU        field.Int
	MemReq     field.Int
	Mem        field.Int
	GPUMemReq  field.Int
	GPUMem     field.Int
	Storage    field.Int
	Extra      field.String

	fieldMap map[string]field.Expr
}

func (u userProject) Table(newTableName string) *userProject {
	u.userProjectDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userProject) As(alias string) *userProject {
	u.userProjectDo.DO = *(u.userProjectDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userProject) updateTableName(table string) *userProject {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UserID = field.NewUint(table, "user_id")
	u.ProjectID = field.NewUint(table, "project_id")
	u.Role = field.NewUint8(table, "role")
	u.AccessMode = field.NewUint8(table, "access_mode")
	u.JobReq = field.NewInt(table, "job_req")
	u.Job = field.NewInt(table, "job")
	u.NodeReq = field.NewInt(table, "node_req")
	u.Node = field.NewInt(table, "node")
	u.CPUReq = field.NewInt(table, "cpu_req")
	u.CPU = field.NewInt(table, "cpu")
	u.GPUReq = field.NewInt(table, "gpu_req")
	u.GPU = field.NewInt(table, "gpu")
	u.MemReq = field.NewInt(table, "mem_req")
	u.Mem = field.NewInt(table, "mem")
	u.GPUMemReq = field.NewInt(table, "gpu_mem_req")
	u.GPUMem = field.NewInt(table, "gpu_mem")
	u.Storage = field.NewInt(table, "storage")
	u.Extra = field.NewString(table, "extra")

	u.fillFieldMap()

	return u
}

func (u *userProject) WithContext(ctx context.Context) IUserProjectDo {
	return u.userProjectDo.WithContext(ctx)
}

func (u userProject) TableName() string { return u.userProjectDo.TableName() }

func (u userProject) Alias() string { return u.userProjectDo.Alias() }

func (u userProject) Columns(cols ...field.Expr) gen.Columns { return u.userProjectDo.Columns(cols...) }

func (u *userProject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userProject) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 22)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["project_id"] = u.ProjectID
	u.fieldMap["role"] = u.Role
	u.fieldMap["access_mode"] = u.AccessMode
	u.fieldMap["job_req"] = u.JobReq
	u.fieldMap["job"] = u.Job
	u.fieldMap["node_req"] = u.NodeReq
	u.fieldMap["node"] = u.Node
	u.fieldMap["cpu_req"] = u.CPUReq
	u.fieldMap["cpu"] = u.CPU
	u.fieldMap["gpu_req"] = u.GPUReq
	u.fieldMap["gpu"] = u.GPU
	u.fieldMap["mem_req"] = u.MemReq
	u.fieldMap["mem"] = u.Mem
	u.fieldMap["gpu_mem_req"] = u.GPUMemReq
	u.fieldMap["gpu_mem"] = u.GPUMem
	u.fieldMap["storage"] = u.Storage
	u.fieldMap["extra"] = u.Extra
}

func (u userProject) clone(db *gorm.DB) userProject {
	u.userProjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userProject) replaceDB(db *gorm.DB) userProject {
	u.userProjectDo.ReplaceDB(db)
	return u
}

type userProjectDo struct{ gen.DO }

type IUserProjectDo interface {
	gen.SubQuery
	Debug() IUserProjectDo
	WithContext(ctx context.Context) IUserProjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserProjectDo
	WriteDB() IUserProjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserProjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserProjectDo
	Not(conds ...gen.Condition) IUserProjectDo
	Or(conds ...gen.Condition) IUserProjectDo
	Select(conds ...field.Expr) IUserProjectDo
	Where(conds ...gen.Condition) IUserProjectDo
	Order(conds ...field.Expr) IUserProjectDo
	Distinct(cols ...field.Expr) IUserProjectDo
	Omit(cols ...field.Expr) IUserProjectDo
	Join(table schema.Tabler, on ...field.Expr) IUserProjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserProjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserProjectDo
	Group(cols ...field.Expr) IUserProjectDo
	Having(conds ...gen.Condition) IUserProjectDo
	Limit(limit int) IUserProjectDo
	Offset(offset int) IUserProjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserProjectDo
	Unscoped() IUserProjectDo
	Create(values ...*model.UserProject) error
	CreateInBatches(values []*model.UserProject, batchSize int) error
	Save(values ...*model.UserProject) error
	First() (*model.UserProject, error)
	Take() (*model.UserProject, error)
	Last() (*model.UserProject, error)
	Find() ([]*model.UserProject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserProject, err error)
	FindInBatches(result *[]*model.UserProject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserProject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserProjectDo
	Assign(attrs ...field.AssignExpr) IUserProjectDo
	Joins(fields ...field.RelationField) IUserProjectDo
	Preload(fields ...field.RelationField) IUserProjectDo
	FirstOrInit() (*model.UserProject, error)
	FirstOrCreate() (*model.UserProject, error)
	FindByPage(offset int, limit int) (result []*model.UserProject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserProjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userProjectDo) Debug() IUserProjectDo {
	return u.withDO(u.DO.Debug())
}

func (u userProjectDo) WithContext(ctx context.Context) IUserProjectDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userProjectDo) ReadDB() IUserProjectDo {
	return u.Clauses(dbresolver.Read)
}

func (u userProjectDo) WriteDB() IUserProjectDo {
	return u.Clauses(dbresolver.Write)
}

func (u userProjectDo) Session(config *gorm.Session) IUserProjectDo {
	return u.withDO(u.DO.Session(config))
}

func (u userProjectDo) Clauses(conds ...clause.Expression) IUserProjectDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userProjectDo) Returning(value interface{}, columns ...string) IUserProjectDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userProjectDo) Not(conds ...gen.Condition) IUserProjectDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userProjectDo) Or(conds ...gen.Condition) IUserProjectDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userProjectDo) Select(conds ...field.Expr) IUserProjectDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userProjectDo) Where(conds ...gen.Condition) IUserProjectDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userProjectDo) Order(conds ...field.Expr) IUserProjectDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userProjectDo) Distinct(cols ...field.Expr) IUserProjectDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userProjectDo) Omit(cols ...field.Expr) IUserProjectDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userProjectDo) Join(table schema.Tabler, on ...field.Expr) IUserProjectDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userProjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserProjectDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userProjectDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserProjectDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userProjectDo) Group(cols ...field.Expr) IUserProjectDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userProjectDo) Having(conds ...gen.Condition) IUserProjectDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userProjectDo) Limit(limit int) IUserProjectDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userProjectDo) Offset(offset int) IUserProjectDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userProjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserProjectDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userProjectDo) Unscoped() IUserProjectDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userProjectDo) Create(values ...*model.UserProject) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userProjectDo) CreateInBatches(values []*model.UserProject, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userProjectDo) Save(values ...*model.UserProject) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userProjectDo) First() (*model.UserProject, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProject), nil
	}
}

func (u userProjectDo) Take() (*model.UserProject, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProject), nil
	}
}

func (u userProjectDo) Last() (*model.UserProject, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProject), nil
	}
}

func (u userProjectDo) Find() ([]*model.UserProject, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserProject), err
}

func (u userProjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserProject, err error) {
	buf := make([]*model.UserProject, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userProjectDo) FindInBatches(result *[]*model.UserProject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userProjectDo) Attrs(attrs ...field.AssignExpr) IUserProjectDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userProjectDo) Assign(attrs ...field.AssignExpr) IUserProjectDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userProjectDo) Joins(fields ...field.RelationField) IUserProjectDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userProjectDo) Preload(fields ...field.RelationField) IUserProjectDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userProjectDo) FirstOrInit() (*model.UserProject, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProject), nil
	}
}

func (u userProjectDo) FirstOrCreate() (*model.UserProject, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProject), nil
	}
}

func (u userProjectDo) FindByPage(offset int, limit int) (result []*model.UserProject, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userProjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userProjectDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userProjectDo) Delete(models ...*model.UserProject) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userProjectDo) withDO(do gen.Dao) *userProjectDo {
	u.DO = *do.(*gen.DO)
	return u
}
